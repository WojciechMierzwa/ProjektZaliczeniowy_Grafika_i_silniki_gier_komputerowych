local MOVE_SPEED = 100
local GRAVITY = -500
local MAX_FALL_SPEED = 500
local JUMP_SPEED = 300
local NORMAL_THRESHOLD = 0.8

total_coins = 0
boost = false
life = 3
is_hurt = false


local MOVE_LEFT_INPUT = hash("move_left")
local MOVE_RIGHT_INPUT = hash("move_right")
local JUMP_INPUT = hash("jump")

local IDLE_ANIM = hash("player_idle")
local MOVE_ANIM = hash("player_move")
local JUMP_ANIM = hash("player_jump")
local ROLL_ANIM = hash("player_roll")


local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local GROUND_LAYER = hash("ground")

local INCREASE_SCORE = hash("increase_score")
local INCREASE_KEY = hash("increase_key")
local ACTIVATE_BOOST = hash("activate_boost")
local INCREASE_LIFE = hash("increase_life")


local HURT_ANIM = hash("player_hurt") 
local KNOCKBACK_FORCE = 200 
local KNOCKBACK_DURATION = 0.2




function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("@render:", "clear_color", {color = vmath.vector4(0.5, 0.8, 0.9, 1)})

	self.spawn_position = go.get_position()
	self.velocity = vmath.vector3()
	self.facing_direction = 1
	self.correction = vmath.vector3()
	self.ground_contact = true
	self.anim = nil
	self.score = 0
	self.key = 0
end

local function clamp(value, min, max)
	if value < min then
		return min
	elseif value > max then
		return max
	else
		return value
	end
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim 
	end
end

local function update_animations(self)
	sprite.set_hflip("#sprite", self.facing_direction == -1)

	-- Playing animation based on conditions
	if boost == true then
		play_animation(self, ROLL_ANIM)  -- Use global boost variable
	elseif is_hurt == true then
		play_animation(self,HURT_ANIM)
	elseif self.ground_contact == false then
		play_animation(self, JUMP_ANIM)
	elseif self.velocity.x == 0 then
		play_animation(self, IDLE_ANIM)
	else
		play_animation(self, MOVE_ANIM)
	end
end




function fixed_update(self, dt)
	-- Gravity
	self.velocity.y = self.velocity.y + GRAVITY * dt
	self.velocity.y = clamp(self.velocity.y, -MAX_FALL_SPEED, MAX_FALL_SPEED)

	-- Movement
	local pos = go.get_position()
	pos = pos + self.velocity * dt -- Update position
	go.set_position(pos)

	-- Update animations
	update_animations(self)

	-- Reset state variables
	self.correction = vmath.vector3()
	self.ground_contact = false

	-- Check if we have fallen from tilemap
	if pos.y < -100 then
		msg.post("game_controller:/game_controller#game_controller", "reload_level")
	end
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end

	-- Wall collision
	if math.abs(normal.x) > NORMAL_THRESHOLD then
		self.velocity.x = 0
	end

	-- Ground collision
	if normal.y > NORMAL_THRESHOLD then
		self.velocity.y = 0
		self.ground_contact = true
	end

	-- Ceiling collision
	if normal.y < -NORMAL_THRESHOLD then
		self.velocity.y = 0
	end
end

-- Function to check boost status (global now)
function is_boosted()
	return boost
end

function on_message(self, message_id, message, sender)
	if message_id == ACTIVATE_BOOST then
		sound.play("#sound_boost")
		boost = true
		msg.post("game_controller:/game_controller#game_controller", "increase_boost_score", {amount = 1})

	elseif message_id == hash("check_boost") then
		print("Global boost status requested, sending response:", boost)
		msg.post(sender, "boost_status", {is_boosted = boost})

	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == GROUND_LAYER then
			handle_obstacle_contact(self, message.normal, message.distance)
		end

	elseif message_id == INCREASE_SCORE then
		sound.play("#sound_coin")
		self.score = self.score + message.amount	
		msg.post("player#player_bar", "update_score_text", {score = self.score})
		print("Player score:", self.score)
		msg.post("game_controller:/game_controller#game_controller", "update_total_coins", {amount = 1})
	elseif message_id == INCREASE_LIFE then
		msg.post("game_controller:/game_controller#game_controller", "increase_hearts_picked_score", {amount = 1})
		life = life + message.amount
		msg.post("player#player_bar", "update_life")

end
end

local function move(self, direction)
	if direction ~= 0 then
		self.facing_direction = direction
	end
	self.velocity.x = MOVE_SPEED * direction
end

function jump(self)
	if not self.ground_contact then
		return
	end
	self.velocity.y = JUMP_SPEED
	self.ground_contact = false
	sound.play("#sound_jump")
end

function on_input(self, action_id, action)
	if action_id == MOVE_LEFT_INPUT then
		move(self, -action.value)
	elseif action_id == MOVE_RIGHT_INPUT then
		move(self, action.value)
	end

	if action_id == JUMP_INPUT then
		jump(self)
	end
end
