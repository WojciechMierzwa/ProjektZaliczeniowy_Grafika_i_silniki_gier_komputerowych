go.property("move_direction", vmath.vector3())
go.property("move_distance", 100)
go.property("move_speed", 20)


local TRIGGER_RESPONSE = hash("trigger_response")
local PLAYER_GROUP = hash("player")
local PREV_POS
local current_animation

function init(self)
	local pos = go.get_position()
	local to = pos + (self.move_direction * self.move_distance)
	local duration = self.move_distance / self.move_speed

	if PREV_POS == nil then
		PREV_POS = pos
	end

	go.animate(".", "position", go.PLAYBACK_LOOP_PINGPONG, to, go.EASING_LINEAR, duration)
end

function update(self, dt)
	local pos = go.get_position()

	if pos.x < PREV_POS.x then
		if current_animation ~= "dino_walk_reverse" then
			sprite.play_flipbook("#sprite", "dino_walk_reverse")
			current_animation = "dino_walk_reverse"
		end
	elseif pos.x > PREV_POS.x then
		if current_animation ~= "dino_walk" then
			sprite.play_flipbook("#sprite", "dino_walk")
			current_animation = "dino_walk"
		end
	end

	-- Update previous position
	PREV_POS = pos
end

function die(self)
	is_alive = false
	sprite.play_flipbook("#sprite", "dino_die") -- Play dying animation
	-- Optional: Schedule deletion or disable the object
	timer.delay(1, false, function() 
		go.delete() -- Deletes the enemy after 1 second
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == TRIGGER_RESPONSE and message.group == PLAYER_GROUP then
		local player_boosted = msg.post(sender, "is_boosted")
		print("Player boosted status:", player_boosted)
		if player_boosted == true then
			die(self)
		else
			msg.post("game_controller:/game_controller#game_controller", "reload_level")
		end
	end
end
