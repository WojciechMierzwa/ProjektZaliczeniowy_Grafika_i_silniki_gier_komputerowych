go.property("move_direction", vmath.vector3())
go.property("move_distance", 100)
go.property("move_speed", 20)

local TRIGGER_RESPONSE = hash("trigger_response")
local PLAYER_GROUP = hash("player")

function init(self)
	-- Initialize instance-specific variables
	self.PREV_POS = go.get_position()
	self.current_animation = nil
	self.lives = 20 
	self.state = "moving"  -- Initial state
	self.attack_timer = 0  -- Timer for attack duration
	self.attack_duration = 0.7 -- Duration of the attack
	self.move_timer = 0 -- Timer for moving duration
	self.move_duration = 2 -- Duration of the moving state

	local pos = go.get_position()
	local to = pos + (self.move_direction * self.move_distance)
	local duration = self.move_distance / self.move_speed

	go.animate(".", "position", go.PLAYBACK_LOOP_PINGPONG, to, go.EASING_LINEAR, duration)
end

function update(self, dt)
	local pos = go.get_position()

	-- Update movement and attack states
	if self.state == "moving" then
		self.move_timer = self.move_timer + dt
		if self.move_timer >= self.move_duration then
			-- Transition to attack state
			self.state = "attacking"
			self.move_timer = 0
			-- Play attack animation
			if self.move_direction.x < 0 then
				sprite.play_flipbook("#sprite", "boss_attack_reverse")  -- Move left
			else
				sprite.play_flipbook("#sprite", "boss_attack")  -- Move right
			end
		end
	elseif self.state == "attacking" then
		self.attack_timer = self.attack_timer + dt
		if self.attack_timer >= self.attack_duration then
			-- Transition back to moving state
			self.state = "moving"
			self.attack_timer = 0
			-- Reset to the appropriate moving animation
			if self.move_direction.x < 0 then
				sprite.play_flipbook("#sprite", "boss_walk_reverse")  -- Move left
			else
				sprite.play_flipbook("#sprite", "boss_walk")  -- Move right
			end
		end
	end

	-- Flip sprite based on direction
	if pos.x < self.PREV_POS.x then
		-- Moving left, flip horizontally
		if self.current_animation ~= "boss_walk_reverse" then
			sprite.play_flipbook("#sprite", "boss_walk_reverse")
			self.current_animation = "boss_walk_reverse"
		end
		sprite.set_hflip("#sprite", true)  -- Flip sprite
	elseif pos.x > self.PREV_POS.x then
		-- Moving right, normal orientation
		if self.current_animation ~= "boss_walk" then
			sprite.play_flipbook("#sprite", "boss_walk")
			self.current_animation = "boss_walk"
		end
		sprite.set_hflip("#sprite", false)  -- No flip
	end

	-- Update previous position
	self.PREV_POS = pos
end

function die(self)
	local knockback_distance_x = 200  
	local arch_height = 150 
	local duration = 0.75 

	go.cancel_animations(".", "position")

	-- Play die animation
	sprite.play_flipbook("#sprite", "boss_die")  

	-- Delay for the animation before moving
	timer.delay(0.1, false, function() 
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, self.PREV_POS.x + knockback_distance_x, go.EASING_OUTQUAD, duration)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.PREV_POS.y + arch_height, go.EASING_OUTSINE, duration / 2, 0, function()
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.PREV_POS.y, go.EASING_INSINE, duration / 2)
		end)
	end)

	-- Delay to allow for the animation to finish before deleting the object
	timer.delay(duration + 0.7, false, function() 
		go.delete()
		msg.post("game_controller:/game_controller#game_controller", "increase_enemy_score", {amount = 1})
	end)
end

local DAMAGE_COOLDOWN = 1  
local can_take_damage = true 

function on_message(self, message_id, message, sender)
	if message_id == TRIGGER_RESPONSE and message.group == PLAYER_GROUP then
		print("Enemy collided with player!")

		-- Check if the enemy is in attack mode
		if self.state == "attacking" then
			-- Boost doesn't work when enemy is attacking
			print("Boost is inactive during attack, player loses 2 life!")
			if can_take_damage then
				life = life - 2  -- Player loses 2 life instead of 1
				is_hurt = true
				print("Player life:", life)
				can_take_damage = false
				msg.post("player#player_bar", "update_life")

				if life <= 0 then
					msg.post("game_controller:/game_controller#game_controller", "reload_level")
				end

				timer.delay(DAMAGE_COOLDOWN, false, function()
					can_take_damage = true
					is_hurt = false
					print("Player can take damage again.")
				end)
			else
				print("Player is in damage cooldown, can't take damage.")
			end
		else
			-- Enemy is not attacking, boost works
			if boost == true then
				print("Global boost is active, reducing boss life!")

				-- Reduce boss lives by 1
				self.lives = self.lives - 1
				print("Boss life:", self.lives)

				-- If boss life reaches 0, boss dies
				if self.lives <= 0 then
					sound.play("#sound_yeet")
					die(self)
				else
					-- If boss still has lives, play a hurt animation or sound
					sprite.play_flipbook("#sprite", "boss_hurt")  -- Assuming you have a hurt animation
				end

				-- Deactivate the boost
				timer.delay(0.8, false, function()
					boost = false
					print("Boost deactivated after 0.5 seconds.")
				end)
			else
				if can_take_damage then
					life = life - 1  -- Player loses 1 life
					is_hurt = true
					print("Player life:", life)
					can_take_damage = false
					msg.post("player#player_bar", "update_life")

					if life <= 0 then
						msg.post("game_controller:/game_controller#game_controller", "reload_level")
					end

					timer.delay(DAMAGE_COOLDOWN, false, function()
						can_take_damage = true
						is_hurt = false
						print("Player can take damage again.")
					end)
				else
					print("Player is in damage cooldown, can't take damage.")
				end
			end
		end
	end
end
